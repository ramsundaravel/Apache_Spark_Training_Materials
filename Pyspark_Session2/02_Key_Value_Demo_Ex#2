problem statement for more than columns presnt in key value pair 
	Input Path on the lab: HDFS Location - /public/nyse
	Problem Statement: Using Spark Core APIs - sort the data in ascending order by date and descending order by volume
	Structure of the data
	Stock Ticker 
	Transaction Date 
	Open Price 
	High Price 
	Low Price 
	Close Price 
	Volume 
	Output Path on the lab: Local Location - /home/YOUR_USER_ID/nyse_sorted_by_volume
	Code should be saved under /home/YOUR_USER_ID/nyse_sorted_by_volume.txt

# open pyspark interactive console
pyspark --master yarn --num-executors 4 --executor-memory 2G --executor-cores 2 --conf "spark.ui.port=12345"

# read the raw data
rawdata = sc.textFile("/public/nyse")

# split data into columns using "," delimited
nyse = rawdata.map(lambda x : x.split(","))

# sort the data based on ascending order by date and descending order by volume
nysesorted = nyse.map(lambda x : ((x[1],-int(x[6])),(x[0],x[2],x[3],x[4],x[5])))\
				 .sortByKey(ascending=True)
# view intermediate result
for i in nysesorted.take(5) :
	print(i)
# intemediate result output
# ((u'19970101', -4160000), (u'STZ', u'3.36', u'3.44', u'3.36', u'3.44'))
# ((u'19970101', -264950), (u'ATI', u'38.5', u'38.5', u'36.73', u'36.95'))
# ((u'19970101', -42500), (u'REV', u'29.63', u'29.88', u'29.63', u'29.63'))
# ((u'19970101', -600), (u'HMY', u'10.5', u'10.5', u'10.5', u'10.5'))
# ((u'19970101', -290), (u'BRK.A', u'34400', u'34400', u'34000', u'34100'))

# reorder the columns for writing into text file
resultdata = nysesorted.map(lambda x : str(x[1][0]) +","+ str(x[0][0]) +","+\
					 str(x[1][1]) +","+ str(x[1][2])\
					+","+ str(x[1][3]) +","+ str(x[1][4]) +","+ str(-x[0][1]))
# view result data
for i in resultdata.take(5) :
	print(i)
# final result
# STZ,19970101,3.36,3.44,3.36,3.44,4160000
# ATI,19970101,38.5,38.5,36.73,36.95,264950
# REV,19970101,29.63,29.88,29.63,29.63,42500
# HMY,19970101,10.5,10.5,10.5,10.5,600
# BRK.A,19970101,34400,34400,34000,34100,290

# writing above steps in single shot
nysesorted = rawdata.map(lambda x : x.split(","))\
				.map(lambda x : ((x[1],-int(x[6])),(x[0],x[2],x[3],x[4],x[5])))\
				.sortByKey()\
				.map(lambda x : str(x[1][0]) +","+ str(x[0][0]) +","+ str(x[1][1]) +","+ str(x[1][2])\
					+","+ str(x[1][3]) +","+ str(x[1][4]) +","+ str(-x[0][1]))


resultdata.saveAsTextFile("/user/spvasanthkumar/ram_training/nyse_sorted_by_volume.txt")


# testing
test = sc.textFile("/user/spvasanthkumar/ram_training/nyse_sorted_by_volume.txt")
for i in test.take(5):
	print(i)