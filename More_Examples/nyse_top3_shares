Details - Duration 10 minutes
Data is available in local file system under /data/nyse (ls -ltr /data/nyse)
Fields (
stockticker:string, 
transactiondate:string, 
openprice:float, 
highprice:float, 
lowprice:float, 
closeprice:float, 
volume:bigint)
Convert file format to parquet
Save it /user/<YOUR_USER_ID>/nyse_parquet

pyspark --master yarn --conf "spark.sql.orc.compression.codec=snappy"

sqlContext.setConf("spark.sql.shuffle.partitions","2")
from pyspark.sql import Row

raw = sc.textFile("/user/ramkarthik/ram/data/exercise2/nyse")

ft = raw.map(lambda x : x.split(","))\
		.map(lambda x : Row(x[0],x[1],x[6]))\
		.toDF(["tk","dt","volume"])

ft.registerTempTable("nyse")


result = sqlContext.sql("select month, tk as  stockticker, \
dense_rank()over(partition by month order by tot_volume desc) as rnk from ( \
select substring(dt,1,6) as month, tk, sum(volume) as tot_volume \
from nyse group by substring(dt,1,6), tk)inx \
having rnk <=3")


# this option works good for parquet only
sqlContext.setConf("spark.sql.parquet.compression.codec","gzip")




result.coalesce(1).write.format("orc").mode("overwrite").save("/user/ramkarthik/ram/solution/nyse/top3_stocks_permonth.orc")


result.coalesce(1).write.format("parquet").mode("overwrite").save("/user/ramkarthik/ram/solution/nyse/top3_stocks_permonth_parquet.parquet")


pyspark --master yarn --num-executors 5 --executor-memory 2G --executor-cores 2

from pyspark.sql import Row
sqlContext.setConf("spark.sql.shuffle.partitions","3")

raw = sc.textFile("/user/ramkarthik/ram/data/exercise2/nyse")

ft = raw.map(lambda x : x.split(","))\
		.map(lambda x : Row(x[0],x[1],x[6]))\
		.toDF(["tk","dt","vl"])

ft.registerTempTable("nyse")

result = sqlContext.sql("select mn as transactionmonth, tk as stockticker, \
dense_rank()over(partition by mn order by volume desc) as rnk from ( \
select substring(dt, 1,6) as mn, tk, sum(vl) as volume from \
nyse group by substring(dt, 1,6), tk ) inx having rnk <= 3")

sqlContext.setConf("spark.sql.json.compression.codec","gzip")

result.coalesce(1).write.format("json").mode("overwrite").save("/user/ramkarthik/ram/solution/nyse/TOP3_STOCKS_PER_MONTH23.json")



